{"version":3,"sources":["components/Unit.js","components/Total.js","components/Input.js","App.js","serviceWorker.js","index.js"],"names":["Unit","react_default","a","createElement","style","width","background","className","Total","_ref","cost","number","alert","value","Number","isInteger","parseFloat","Math","round","toFixed","Input","onInputChange","type","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","setState","target","console","log","state","document","body","backgroundColor","alignSelf","components_Unit","components_Input","components_Total","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAgBeA,EAdF,WAEZ,OACCC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,MAAO,QAASC,WAAY,WAAYC,UAAU,qBAC9DN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,iBACb,iBAEFN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,yBACb,YCoCUC,EA3CD,SAAAC,GAAc,IACvBC,EAAa,MADUD,EAAZE,OAGf,GAAGD,EAAO,EACT,OACAT,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,MAAO,SAAUE,UAAU,+BAEvCN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,YACb,cAEFN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,YACb,MAGDK,MAAM,0EAQR,IAAIC,EAAQ,GAIZ,OAFKA,EADDC,OAAOC,UAAUL,GACRG,EAAS,IAAMG,WAAWC,KAAKC,MAAY,IAANR,GAAa,KAAKS,QAAQ,GADtC,IAAMH,WAAWC,KAAKC,MAAY,IAANR,GAAa,KAAKS,QAAQ,GAI5FlB,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,MAAO,SAAUE,UAAU,+BAEvCN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,YACb,cAEFN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,YAEbM,KCbUO,EAtBD,SAAAX,GAAoB,IAAlBY,EAAkBZ,EAAlBY,cACf,OACCpB,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,OAAKI,UAAU,UACdN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,mBACdN,EAAAC,EAAAC,cAAA,KAAGI,UAAU,cAAb,cACAN,EAAAC,EAAAC,cAAA,SACCI,UAAU,0BACVe,KAAK,OACLC,SAAWF,QCoCFG,qBAxCb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAMFP,cAAgB,SAACW,GACfP,EAAKQ,SAAS,CAACtB,OAAQqB,EAAME,OAAOrB,QACpCsB,QAAQC,IAAIX,EAAKY,MAAM1B,SAPvBc,EAAKY,MAAM,CACT1B,OAAQ,GAHCc,wEAgBX,OAFAa,SAASC,KAAKnC,MAAMoC,gBAAgB,UAGlCvC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,gBACbN,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACE,WAAY,UAAWmC,UAAW,UAAWlC,UAAU,yCAEhEN,EAAAC,EAAAC,cAACuC,EAAD,MAEAzC,EAAAC,EAAAC,cAACwC,EAAD,CACGtB,cAAeO,KAAKP,gBAOvBpB,EAAAC,EAAAC,cAACyC,EAAD,CACEjC,OAAQiB,KAAKS,MAAM1B,kBAhCfkC,oBCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASf,SAASgB,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.585fee40.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Unit = () => {\r\n\t// let cost = 175.5;\r\n\treturn (\r\n\t\t<div style={{width: \"160px\", background: \"#1DC090\"}} className=\"tc pa3 sans-serif\">\r\n\t\t\t<div className='black f4 asfs'>\r\n\t\t\t\t{'COST PER UNIT'}\r\n\t\t\t</div>\r\n\t\t\t<div className='pt4 jcb white f2 asfe'>\r\n\t\t\t\t{'$' + 175.5}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Unit;","import React from 'react';\r\nimport './Unit';\r\n\r\nconst Total = ({number}) => {\r\n\tlet cost =number*175.50;\r\n\r\n\tif(cost < 0){\r\n\t\treturn(\r\n\t\t<div style={{width: \"160px\"}} className='bg-purple tc pa3 sans-serif'>\r\n\r\n\t\t\t<div className='black f4'>\r\n\t\t\t\t{'TOTAL COST'}\r\n\t\t\t</div>\r\n\t\t\t<div className='white f2'>\r\n\t\t\t\t{'$0'}\r\n\t\t\t</div>\r\n\r\n\t\t\t{alert('Please enter a unit value from 0 to infinity...no negative numbers...')}\r\n\r\n\t\t</div>\r\n\r\n\t);\r\n\t}\r\n\r\n\telse{\r\n\t\tlet value = '';\r\n\t\tif(!Number.isInteger(cost)){ value =  '$' + parseFloat(Math.round(cost* 100) / 100).toFixed(2)}\r\n\t\telse{value = value =  '$' + parseFloat(Math.round(cost* 100) / 100).toFixed(0)}\r\n\r\n\t\treturn(\r\n\t\t<div style={{width: \"160px\"}} className='bg-purple tc pa3 sans-serif'>\r\n\r\n\t\t\t<div className='black f4'>\r\n\t\t\t\t{'TOTAL COST'}\r\n\t\t\t</div>\r\n\t\t\t<div className='white f2'>\r\n\t\t\t\t\r\n\t\t\t\t{value}\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t);\r\n\t}\r\n}\r\n\r\nexport default Total;","import React from 'react';\r\n\r\nconst Input = ({onInputChange}) =>{\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div className='center'>\r\n\t\t\t\t<div className='center form asc'>\r\n\t\t\t\t\t<p className='tc f4 gray'># OF UNITS</p>\r\n\t\t\t\t\t<input \r\n\t\t\t\t\t\tclassName='f4 pa2 w-25 flex center' \r\n\t\t\t\t\t\ttype='text' \r\n\t\t\t\t\t\tonChange={ onInputChange }\r\n\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t{/*<button \r\n\t\t\t\t\t\tclassName='w-30 grow f4 link ph3 pv2 dib white bg-light-purple'\r\n\t\t\t\t\t\tonClick={onButtonSubmit }>\r\n\t\t\t\t\t\tDetect</button>*/}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\t\r\n\r\nexport default Input;","import React, { Component } from 'react';\nimport Unit from './components/Unit';\nimport Total from './components/Total';\nimport Input from './components/Input';\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state={\n      number: 0\n    }\n  }\n\n  onInputChange = (event) => {\n    this.setState({number: event.target.value});\n    console.log(this.state.number);\n  }\n  \n  render(){\n\n    document.body.style.backgroundColor=\"#E0F4F4\";\n\n    return (\n      <div className=\"flex-col asc\">\n        <div style={{background: \"#2B3030\", alignSelf: \"middle\"}} className=\"shadow-5 flex justify-between ml6 mr6\">\n          \n            <Unit />\n            \n            <Input \n               onInputChange={this.onInputChange}\n            />\n            \n          {/*<Increment />\n          \n          <Decrement />*/}\n         \n            <Total \n              number={this.state.number}\n            />\n          \n        </div>\n      </div>  \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}